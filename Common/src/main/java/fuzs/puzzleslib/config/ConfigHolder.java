package fuzs.puzzleslib.config;

import java.nio.file.Paths;
import java.util.function.Consumer;
import java.util.function.Supplier;

/**
 * a config holder holds two separate configs for both logical server and logical client
 * one or both types may not be present, depending on mod requirements and physical side
 * @param <C> client config type
 * @param <S> server config type
 */
public interface ConfigHolder<C extends AbstractConfig, S extends AbstractConfig> {

    /**
     * @return client config from this holder, possibly null
     */
    C client();

    /**
     * @return server config from this holder, possibly null
     */
    S server();

    /**
     * @return is the client config full loaded and ready to be used
     */
    boolean isClientAvailable();

    /**
     * @return is the server config full loaded and ready to be used
     */
    boolean isServerAvailable();

    /**
     * @param callback callback for this client config
     */
    void addClientCallback(Runnable callback);

    /**
     * @param callback callback for this server config
     */
    void addServerCallback(Runnable callback);

    /**
     * register config event and configs themselves for <code>modId</code>
     * @param modId modId to register for
     */
    void loadConfigs(String modId);

    /**
     * @param modId mod id this config belongs to
     * @return config name
     */
    static String simpleName(String modId) {
        return String.format("%s.toml", modId);
    }

    /**
     * @param modId mod id this config belongs to
     * @param type type of config
     * @return config name as when generated by Forge
     */
    static String defaultName(String modId, String type) {
        return String.format("%s-%s.toml", modId, type);
    }

    /**
     * @param configDir dir to move config to
     * @param fileName config file name
     * @return path to config in dir
     */
    static String moveToDir(String configDir, String fileName) {
        return Paths.get(configDir, fileName).toString();
    }

    /**
     * callback interface for saving config values upon config reload
     */
    @FunctionalInterface
    interface ConfigCallback {

        /**
         * @param entry source config value object
         * @param save action to perform when value changes (is reloaded)
         * @param <T> type for value
         */
        <T> void accept(Supplier<T> entry, Consumer<T> save);
    }
}
